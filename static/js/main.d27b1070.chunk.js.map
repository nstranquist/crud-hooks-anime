{"version":3,"sources":["lists/AnimeList.tsx","forms/AddAnimeForm.tsx","forms/EditAnimeForm.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AnimeList","animes","editAnime","deleteAnime","map","anime","className","title","rating","onClick","event","preventDefault","id","AddAnimeForm","addAnime","initialFormState","useState","newAnime","setNewAnime","handleInputChange","target","name","value","onSubmit","type","onChange","min","max","EditAnimeForm","currentAnime","updateAnime","setAnime","useEffect","App","setAnimes","editing","setEditing","setCurrentAnime","length","filter","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d27b1070.chunk.js","sourcesContent":["import React from 'react'\nimport { Anime } from '../types'\n\ninterface IProps {\n  animes: Anime[]\n  editAnime(anime: Anime): void\n  deleteAnime(id: number): void\n}\n\nconst AnimeList: React.FC<IProps> = ({\n  animes,\n  editAnime,\n  deleteAnime\n}) => {\n\n  return (\n    <div>\n      {animes.map(anime => (\n        <div className=\"anime-item\">\n          <h3>{anime.title}</h3>\n          <p>{anime.rating} stars</p>\n          <div className=\"buttonbar\">\n            <button onClick={(event) => {\n              event.preventDefault()\n              editAnime(anime)\n            }} className=\"btn btn-primary\">\n              Edit\n            </button>\n            <button onClick={(event) => {\n              event.preventDefault()\n              deleteAnime(anime.id!)\n            }} className=\"btn\">\n              Delete\n            </button>\n          </div>\n        </div>\n      ))}\n    </div>\n  )\n}\n\nexport default AnimeList","import React, { useState } from 'react'\nimport { Anime } from '../types'\n\ninterface IProps {\n  addAnime(newAnime: Anime): void\n}\n\nconst AddAnimeForm: React.FC<IProps> = ({\n  addAnime\n}) => {\n  const initialFormState = { id: null, title: '', rating: 3 }\n  const [newAnime, setNewAnime] = useState(initialFormState)\n\n  const handleInputChange = (event: React.FormEvent<HTMLInputElement>): void => {\n    const { name, value } = event.target as HTMLInputElement\n    setNewAnime({ ...newAnime, [name]: value })\n  }\n\n  return (\n    <form onSubmit={(event) => {\n      event.preventDefault()\n      if (!newAnime.title || !newAnime.rating) return\n      addAnime(newAnime)\n      setNewAnime(initialFormState)\n    }}>\n      <div className=\"form-item\">\n        <label>Title</label>\n        <input type=\"text\" name=\"title\" value={newAnime.title} onChange={handleInputChange} />\n      </div>\n      <div className=\"form-item\">\n        <label>Rating</label>\n        <input type=\"number\" name=\"rating\" min=\"1\" max=\"5\" value={newAnime.rating} onChange={handleInputChange} />\n      </div>\n      <button className=\"btn btn-primary\">\n        Add\n      </button>\n    </form>\n  )\n}\n\nexport default AddAnimeForm","import React, { useState, useEffect } from 'react'\nimport { Anime } from '../types'\n\ninterface IProps {\n  currentAnime: Anime\n  updateAnime(anime: Anime): void\n}\n\nconst EditAnimeForm: React.FC<IProps> = ({\n  currentAnime,\n  updateAnime\n}) => {\n  const [anime, setAnime] = useState<Anime>(currentAnime)\n\n  useEffect(() => {\n    setAnime(currentAnime)  // to change/re-render edit fields when anime clicked in list\n  }, [currentAnime, updateAnime])\n\n  const handleInputChange = (event: React.FormEvent<HTMLInputElement>): void => {\n    const { name, value } = event.target as HTMLInputElement\n    setAnime({ ...anime, [name]: value })\n  }\n\n  return (\n    <form onSubmit={(event) => {\n      event.preventDefault()\n      if (!anime.title || !anime.rating) return\n      updateAnime(anime)\n    }}>\n      <div className=\"form-item\">\n        <label>Title: </label>\n        <input type=\"text\" name=\"title\" value={anime.title} onChange={handleInputChange} />\n      </div>\n      <div className=\"form-item\">\n        <label>Rating: </label>\n        <input type=\"number\" name=\"rating\" min=\"1\" max=\"5\" value={anime.rating!} onChange={handleInputChange} />\n      </div>\n      <button className=\"btn btn-primary\">\n        Update Anime\n      </button>\n    </form>\n  )\n}\n\nexport default EditAnimeForm","import React, { useState } from 'react';\nimport AnimeList from './lists/AnimeList'\nimport AddAnimeForm from './forms/AddAnimeForm'\nimport EditAnimeForm from './forms/EditAnimeForm'\nimport { Anime } from './types'\nimport './App.css';\n\nconst App: React.FC = () => {\n  const initialAnimeData = [\n    { id: 0, title: 'my hero academia', rating: 4 },\n    { id: 1, title: 'sword art online', rating: 5 },\n    { id: 2, title: 'vampire night', rating: 3 },\n  ]\n  const [animes, setAnimes] = useState<Anime[]>(initialAnimeData)\n  const [editing, setEditing] = useState(false)\n  const [currentAnime, setCurrentAnime] = useState<Anime>({ id: null, title: '', rating: 3 })\n\n  const addAnime = (newAnime: Anime) => {\n    newAnime.id = animes.length + 1   // use firebase here\n    setAnimes([...animes, newAnime])\n  }\n  const deleteAnime = (id: number) => {\n    setEditing(false)\n    setAnimes(animes.filter(anime => anime.id !== id))\n  }\n  const editAnime = (anime: Anime) => {\n    setEditing(true)\n    setCurrentAnime({ id: anime.id, title: anime.title, rating: anime.rating })\n  }\n  const updateAnime = (newAnime: Anime) => {\n    setEditing(false)\n    setAnimes(animes.map(anime => (\n      anime.id === newAnime.id ? newAnime : anime\n    )))\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Anime Form</h1>\n      <div className=\"splitscreen\">\n        <div className=\"split-item left\">\n          {!editing ? (\n            <div>\n              <h2 className=\"section-heading\">Add Anime</h2>\n              <AddAnimeForm addAnime={addAnime} />\n            </div>\n\n          ) : (\n              <div>\n                <h2 className=\"section-heading\">Edit Anime</h2>\n                <EditAnimeForm updateAnime={updateAnime} currentAnime={currentAnime} />\n              </div>\n            )}\n        </div>\n        <div className=\"split-item right\">\n          <h2 className=\"section-heading\">Your Animes</h2>\n          <AnimeList animes={animes} deleteAnime={deleteAnime} editAnime={editAnime} />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}